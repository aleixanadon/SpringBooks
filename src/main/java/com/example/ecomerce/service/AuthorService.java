package com.example.ecomerce.service;

import com.example.ecomerce.model.dto.AuthorDTO;
import com.example.ecomerce.model.entity.Author;
import com.example.ecomerce.repository.AuthorRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

/**
 * Service can:
 * Call the repository
 * Logic business
 * Convert entities to DTOs
 */

@org.springframework.stereotype.Service
public class AuthorService {
    /**
     * Autowired gets the bean called authorRepository
     * autogenerated by Spring to handle the data.
     */
    @Autowired
    private AuthorRepository authorRepository;

    /**
     * Author::toDTO is a lambda function to convert from Entity Class to DTO Class
     */
    public @ResponseBody List<AuthorDTO> getAuthorsDTO() {
        return StreamSupport.stream(authorRepository
            .findAll().spliterator(), false)
            .map(Author::toDTO)
            .collect(Collectors.toList());
    }

    public @ResponseBody Optional<AuthorDTO> getAuthorDTOById(int id) {
        return authorRepository.findById(id).map(Author::toDTO);
    }
}
